
Test-Project-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004010  08004010  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08004024  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004024  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3e8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fef  00000000  00000000  0002e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014784  00000000  00000000  00031af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8b8  00000000  00000000  0004627c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805df  00000000  00000000  00054b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000d5164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f84 	.word	0x08003f84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f84 	.word	0x08003f84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fc0e 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f99a 	bl	80007ec <MX_GPIO_Init>
  MX_RTC_Init();
 80004b8:	f000 f890 	bl	80005dc <MX_RTC_Init>
  MX_SPI1_Init();
 80004bc:	f000 f92e 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004c0:	f000 f964 	bl	800078c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(1==flag)
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <main+0x38>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d1fb      	bne.n	80004c4 <main+0x1c>
	  {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <main+0x3c>)
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 ff6c 	bl	80013ae <HAL_GPIO_TogglePin>
		  flag=0;
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <main+0x38>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
	  if(1==flag)
 80004dc:	e7f2      	b.n	80004c4 <main+0x1c>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	20000128 	.word	0x20000128
 80004e4:	50000400 	.word	0x50000400

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2438      	movs	r4, #56	; 0x38
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2338      	movs	r3, #56	; 0x38
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 fd3b 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f003 fd33 	bl	8003f74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	003b      	movs	r3, r7
 8000510:	0018      	movs	r0, r3
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f003 fd2c 	bl	8003f74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <SystemClock_Config+0xec>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <SystemClock_Config+0xf0>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <SystemClock_Config+0xec>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	220a      	movs	r2, #10
 8000534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2210      	movs	r2, #16
 8000540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2202      	movs	r2, #2
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	0312      	lsls	r2, r2, #12
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0412      	lsls	r2, r2, #16
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	0018      	movs	r0, r3
 8000568:	f000 ff58 	bl	800141c <HAL_RCC_OscConfig>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000570:	f000 fa2c 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	2124      	movs	r1, #36	; 0x24
 8000576:	187b      	adds	r3, r7, r1
 8000578:	220f      	movs	r2, #15
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2203      	movs	r2, #3
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2101      	movs	r1, #1
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fb13 	bl	8001bc4 <HAL_RCC_ClockConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005a2:	f000 fa13 	bl	80009cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2222      	movs	r2, #34	; 0x22
 80005aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	0292      	lsls	r2, r2, #10
 80005b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	003b      	movs	r3, r7
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fd25 	bl	800200c <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005c6:	f000 fa01 	bl	80009cc <Error_Handler>
  }
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b01d      	add	sp, #116	; 0x74
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b090      	sub	sp, #64	; 0x40
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005e2:	232c      	movs	r3, #44	; 0x2c
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	0018      	movs	r0, r3
 80005e8:	2314      	movs	r3, #20
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f003 fcc1 	bl	8003f74 <memset>
  RTC_DateTypeDef sDate = {0};
 80005f2:	2328      	movs	r3, #40	; 0x28
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80005fa:	003b      	movs	r3, r7
 80005fc:	0018      	movs	r0, r3
 80005fe:	2328      	movs	r3, #40	; 0x28
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 fcb6 	bl	8003f74 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <MX_RTC_Init+0x134>)
 800060a:	4a42      	ldr	r2, [pc, #264]	; (8000714 <MX_RTC_Init+0x138>)
 800060c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <MX_RTC_Init+0x134>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <MX_RTC_Init+0x134>)
 8000616:	221f      	movs	r2, #31
 8000618:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <MX_RTC_Init+0x134>)
 800061c:	4a3e      	ldr	r2, [pc, #248]	; (8000718 <MX_RTC_Init+0x13c>)
 800061e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <MX_RTC_Init+0x134>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_RTC_Init+0x134>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <MX_RTC_Init+0x134>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000632:	4b37      	ldr	r3, [pc, #220]	; (8000710 <MX_RTC_Init+0x134>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <MX_RTC_Init+0x134>)
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fe3c 	bl	80022b8 <HAL_RTC_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000644:	f000 f9c2 	bl	80009cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000648:	212c      	movs	r1, #44	; 0x2c
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000668:	1879      	adds	r1, r7, r1
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <MX_RTC_Init+0x134>)
 800066c:	2200      	movs	r2, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fec0 	bl	80023f4 <HAL_RTC_SetTime>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000678:	f000 f9a8 	bl	80009cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800067c:	2128      	movs	r1, #40	; 0x28
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000696:	1879      	adds	r1, r7, r1
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_RTC_Init+0x134>)
 800069a:	2200      	movs	r2, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 ff6d 	bl	800257c <HAL_RTC_SetDate>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80006a6:	f000 f991 	bl	80009cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80006d4:	003b      	movs	r3, r7
 80006d6:	22f0      	movs	r2, #240	; 0xf0
 80006d8:	0512      	lsls	r2, r2, #20
 80006da:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2101      	movs	r1, #1
 80006e8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0052      	lsls	r2, r2, #1
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80006f2:	0039      	movs	r1, r7
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_RTC_Init+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 ffed 	bl	80026d8 <HAL_RTC_SetAlarm_IT>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000702:	f000 f963 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b010      	add	sp, #64	; 0x40
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000028 	.word	0x20000028
 8000714:	40002800 	.word	0x40002800
 8000718:	000003ff 	.word	0x000003ff

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_SPI1_Init+0x6c>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x68>)
 8000728:	2282      	movs	r2, #130	; 0x82
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x68>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_SPI1_Init+0x68>)
 8000750:	2220      	movs	r2, #32
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x68>)
 8000768:	2207      	movs	r2, #7
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_SPI1_Init+0x68>)
 800076e:	0018      	movs	r0, r3
 8000770:	f002 f9d6 	bl	8002b20 <HAL_SPI_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f928 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000004c 	.word	0x2000004c
 8000788:	40013000 	.word	0x40013000

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	22e1      	movs	r2, #225	; 0xe1
 800079a:	0252      	lsls	r2, r2, #9
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 fb55 	bl	8002e80 <HAL_UART_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8f7 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000a4 	.word	0x200000a4
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	2414      	movs	r4, #20
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 fbb9 	bl	8003f74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b66      	ldr	r3, [pc, #408]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b60      	ldr	r3, [pc, #384]	; (800099c <MX_GPIO_Init+0x1b0>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b5d      	ldr	r3, [pc, #372]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b5a      	ldr	r3, [pc, #360]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b59      	ldr	r3, [pc, #356]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000838:	2104      	movs	r1, #4
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b57      	ldr	r3, [pc, #348]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2204      	movs	r2, #4
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b54      	ldr	r3, [pc, #336]	; (800099c <MX_GPIO_Init+0x1b0>)
 800084c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084e:	4b53      	ldr	r3, [pc, #332]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	430a      	orrs	r2, r1
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <MX_GPIO_Init+0x1b0>)
 8000858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8000862:	494f      	ldr	r1, [pc, #316]	; (80009a0 <MX_GPIO_Init+0x1b4>)
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fd82 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000870:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x1b8>)
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd7c 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x1bc>)
 800087e:	2200      	movs	r2, #0
 8000880:	2107      	movs	r1, #7
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd76 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a45      	ldr	r2, [pc, #276]	; (80009a0 <MX_GPIO_Init+0x1b4>)
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	193a      	adds	r2, r7, r4
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fbe5 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2213      	movs	r2, #19
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2288      	movs	r2, #136	; 0x88
 80008ba:	0352      	lsls	r2, r2, #13
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	000c      	movs	r4, r1
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x1b8>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 fbd3 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2240      	movs	r2, #64	; 0x40
 80008d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2201      	movs	r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x1b8>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	0010      	movs	r0, r2
 80008f2:	f000 fbc1 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0192      	lsls	r2, r2, #6
 80008fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2288      	movs	r2, #136	; 0x88
 8000904:	0352      	lsls	r2, r2, #13
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	000c      	movs	r4, r1
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000910:	193b      	adds	r3, r7, r4
 8000912:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <MX_GPIO_Init+0x1bc>)
 8000914:	0019      	movs	r1, r3
 8000916:	0010      	movs	r0, r2
 8000918:	f000 fbae 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2207      	movs	r2, #7
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2202      	movs	r2, #2
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	193b      	adds	r3, r7, r4
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_GPIO_Init+0x1bc>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fb9c 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000940:	0021      	movs	r1, r4
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2204      	movs	r2, #4
 8000946:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2284      	movs	r2, #132	; 0x84
 800094c:	0392      	lsls	r2, r2, #14
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000956:	187b      	adds	r3, r7, r1
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_GPIO_Init+0x1b8>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f000 fb8b 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2005      	movs	r0, #5
 8000968:	f000 facc 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800096c:	2005      	movs	r0, #5
 800096e:	f000 fade 	bl	8000f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2006      	movs	r0, #6
 8000978:	f000 fac4 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800097c:	2006      	movs	r0, #6
 800097e:	f000 fad6 	bl	8000f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fabc 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800098c:	2007      	movs	r0, #7
 800098e:	f000 face 	bl	8000f2e <HAL_NVIC_EnableIRQ>

}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b00b      	add	sp, #44	; 0x2c
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40021000 	.word	0x40021000
 80009a0:	00009002 	.word	0x00009002
 80009a4:	50000400 	.word	0x50000400
 80009a8:	50000800 	.word	0x50000800

080009ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	801a      	strh	r2, [r3, #0]
	flag=1;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000128 	.word	0x20000128

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_MspInit+0x24>)
 80009de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x24>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_MspInit+0x24>)
 80009ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_MspInit+0x24>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	0549      	lsls	r1, r1, #21
 80009f2:	430a      	orrs	r2, r1
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_RTC_MspInit+0x38>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10e      	bne.n	8000a30 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_RTC_MspInit+0x3c>)
 8000a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_RTC_MspInit+0x3c>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	02c9      	lsls	r1, r1, #11
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2002      	movs	r0, #2
 8000a26:	f000 fa6d 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fa7f 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40002800 	.word	0x40002800
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	2414      	movs	r4, #20
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 fa8e 	bl	8003f74 <memset>
  if(hspi->Instance==SPI1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2c      	ldr	r2, [pc, #176]	; (8000b10 <HAL_SPI_MspInit+0xd0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d152      	bne.n	8000b08 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	0149      	lsls	r1, r1, #5
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	2202      	movs	r2, #2
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_SPI_MspInit+0xd4>)
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <HAL_SPI_MspInit+0xd8>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f000 fad7 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	22c0      	movs	r2, #192	; 0xc0
 8000ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	187a      	adds	r2, r7, r1
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fac0 	bl	8001078 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2019      	movs	r0, #25
 8000afe:	f000 fa01 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b02:	2019      	movs	r0, #25
 8000b04:	f000 fa13 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b00b      	add	sp, #44	; 0x2c
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	50000400 	.word	0x50000400

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	240c      	movs	r4, #12
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f003 fa20 	bl	8003f74 <memset>
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d131      	bne.n	8000ba2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0289      	lsls	r1, r1, #10
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	430a      	orrs	r2, r1
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b64:	0021      	movs	r1, r4
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	220c      	movs	r2, #12
 8000b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2202      	movs	r2, #2
 8000b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2204      	movs	r2, #4
 8000b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	187a      	adds	r2, r7, r1
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fa73 	bl	8001078 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	201c      	movs	r0, #28
 8000b98:	f000 f9b4 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b9c:	201c      	movs	r0, #28
 8000b9e:	f000 f9c6 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b009      	add	sp, #36	; 0x24
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8cc 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <RTC_IRQHandler+0x14>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 fec0 	bl	8002970 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000028 	.word	0x20000028

08000bfc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f000 fbef 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 fbec 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000c16:	2004      	movs	r0, #4
 8000c18:	f000 fbe4 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000c26:	2010      	movs	r0, #16
 8000c28:	f000 fbdc 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 fbd7 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <SPI1_IRQHandler+0x14>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 f800 	bl	8002c48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	2000004c 	.word	0x2000004c

08000c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <USART2_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 f964 	bl	8002f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	200000a4 	.word	0x200000a4

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca2:	f7ff ffe3 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f003 f941 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fbfd 	bl	80004a8 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
   ldr   r0, =_estack
 8000cb0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cbc:	08004018 	.word	0x08004018
  ldr r2, =_sbss
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc4:	20000130 	.word	0x20000130

08000cc8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_COMP_IRQHandler>
	...

08000ccc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x3c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Init+0x3c>)
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f811 	bl	8000d0c <HAL_InitTick>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e001      	b.n	8000cfa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf6:	f7ff fe6f 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x60>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	23fa      	movs	r3, #250	; 0xfa
 8000d20:	0098      	lsls	r0, r3, #2
 8000d22:	f7ff f9f1 	bl	8000108 <__udivsi3>
 8000d26:	0003      	movs	r3, r0
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f7ff f9ec 	bl	8000108 <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f90b 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e00f      	b.n	8000d60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d80b      	bhi.n	8000d5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f8d8 	bl	8000f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_InitTick+0x64>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b003      	add	sp, #12
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	18d2      	adds	r2, r2, r3
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000008 	.word	0x20000008
 8000d94:	2000012c 	.word	0x2000012c

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	2000012c 	.word	0x2000012c

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d809      	bhi.n	8000dd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	401a      	ands	r2, r3
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_EnableIRQ+0x30>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4091      	lsls	r1, r2
 8000dd0:	000a      	movs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b7f      	cmp	r3, #127	; 0x7f
 8000df4:	d828      	bhi.n	8000e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	589b      	ldr	r3, [r3, r2]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <__NVIC_SetPriority+0xd4>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e46:	e031      	b.n	8000eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0019      	movs	r1, r3
 8000e50:	230f      	movs	r3, #15
 8000e52:	400b      	ands	r3, r1
 8000e54:	3b08      	subs	r3, #8
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3306      	adds	r3, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1dfa      	adds	r2, r7, #7
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	0011      	movs	r1, r2
 8000e68:	2203      	movs	r2, #3
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	21ff      	movs	r1, #255	; 0xff
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	401a      	ands	r2, r3
 8000e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	401a      	ands	r2, r3
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4003      	ands	r3, r0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <__NVIC_SetPriority+0xd8>)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001c      	movs	r4, r3
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	089b      	lsrs	r3, r3, #2
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18c3      	adds	r3, r0, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	045b      	lsls	r3, r3, #17
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d301      	bcc.n	8000ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e010      	b.n	8000ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <SysTick_Config+0x44>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff7c 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x44>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x44>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	210f      	movs	r1, #15
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b004      	add	sp, #16
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	0002      	movs	r2, r0
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff33 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffaf 	bl	8000ebc <SysTick_Config>
 8000f5e:	0003      	movs	r3, r0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2225      	movs	r2, #37	; 0x25
 8000f7c:	5c9b      	ldrb	r3, [r3, r2]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d008      	beq.n	8000f96 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2204      	movs	r2, #4
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2224      	movs	r2, #36	; 0x24
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e024      	b.n	8000fe0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	210e      	movs	r1, #14
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	221c      	movs	r2, #28
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2225      	movs	r2, #37	; 0x25
 8000fce:	2101      	movs	r1, #1
 8000fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2224      	movs	r2, #36	; 0x24
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	5499      	strb	r1, [r3, r2]

    return status;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2225      	movs	r2, #37	; 0x25
 8000ffc:	5c9b      	ldrb	r3, [r3, r2]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d006      	beq.n	8001012 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e02a      	b.n	8001068 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	210e      	movs	r1, #14
 800101e:	438a      	bics	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	438a      	bics	r2, r1
 8001030:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	221c      	movs	r2, #28
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2101      	movs	r1, #1
 8001040:	4091      	lsls	r1, r2
 8001042:	000a      	movs	r2, r1
 8001044:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2225      	movs	r2, #37	; 0x25
 800104a:	2101      	movs	r1, #1
 800104c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2224      	movs	r2, #36	; 0x24
 8001052:	2100      	movs	r1, #0
 8001054:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	0010      	movs	r0, r2
 8001066:	4798      	blx	r3
    }
  }
  return status;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	781b      	ldrb	r3, [r3, #0]
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800108e:	e155      	b.n	800133c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4091      	lsls	r1, r2
 800109a:	000a      	movs	r2, r1
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d100      	bne.n	80010a8 <HAL_GPIO_Init+0x30>
 80010a6:	e146      	b.n	8001336 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d130      	bne.n	8001122 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	409a      	lsls	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	2201      	movs	r2, #1
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	4013      	ands	r3, r2
 800112a:	2b03      	cmp	r3, #3
 800112c:	d017      	beq.n	800115e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	2b02      	cmp	r3, #2
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	58d3      	ldr	r3, [r2, r3]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2207      	movs	r2, #7
 800117c:	4013      	ands	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2107      	movs	r1, #7
 8001196:	400b      	ands	r3, r1
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	401a      	ands	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	23c0      	movs	r3, #192	; 0xc0
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	4013      	ands	r3, r2
 80011f0:	d100      	bne.n	80011f4 <HAL_GPIO_Init+0x17c>
 80011f2:	e0a0      	b.n	8001336 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001200:	4a55      	ldr	r2, [pc, #340]	; (8001358 <HAL_GPIO_Init+0x2e0>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	589b      	ldr	r3, [r3, r2]
 800120c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	429a      	cmp	r2, r3
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x1f6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x2e4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x1f2>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x1ee>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x2ec>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1ea>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a47      	ldr	r2, [pc, #284]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1e6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_GPIO_Init+0x2f4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1e2>
 8001256:	2305      	movs	r3, #5
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 800125a:	2306      	movs	r3, #6
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x1f8>
 800126e:	2300      	movs	r3, #0
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	2103      	movs	r1, #3
 8001274:	400a      	ands	r2, r1
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x2e0>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	4013      	ands	r3, r2
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43da      	mvns	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	035b      	lsls	r3, r3, #13
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	039b      	lsls	r3, r3, #14
 8001324:	4013      	ands	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_GPIO_Init+0x2f8>)
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	40da      	lsrs	r2, r3
 8001344:	1e13      	subs	r3, r2, #0
 8001346:	d000      	beq.n	800134a <HAL_GPIO_Init+0x2d2>
 8001348:	e6a2      	b.n	8001090 <HAL_GPIO_Init+0x18>
  }
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	50000400 	.word	0x50000400
 8001360:	50000800 	.word	0x50000800
 8001364:	50000c00 	.word	0x50000c00
 8001368:	50001000 	.word	0x50001000
 800136c:	50001c00 	.word	0x50001c00
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	0008      	movs	r0, r1
 800137e:	0011      	movs	r1, r2
 8001380:	1cbb      	adds	r3, r7, #2
 8001382:	1c02      	adds	r2, r0, #0
 8001384:	801a      	strh	r2, [r3, #0]
 8001386:	1c7b      	adds	r3, r7, #1
 8001388:	1c0a      	adds	r2, r1, #0
 800138a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138c:	1c7b      	adds	r3, r7, #1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001394:	1cbb      	adds	r3, r7, #2
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800139e:	1cbb      	adds	r3, r7, #2
 80013a0:	881a      	ldrh	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	000a      	movs	r2, r1
 80013b8:	1cbb      	adds	r3, r7, #2
 80013ba:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c2:	1cbb      	adds	r3, r7, #2
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	041a      	lsls	r2, r3, #16
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	1cb9      	adds	r1, r7, #2
 80013d2:	8809      	ldrh	r1, [r1, #0]
 80013d4:	400b      	ands	r3, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	0002      	movs	r2, r0
 80013ec:	1dbb      	adds	r3, r7, #6
 80013ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	1dba      	adds	r2, r7, #6
 80013f6:	8812      	ldrh	r2, [r2, #0]
 80013f8:	4013      	ands	r3, r2
 80013fa:	d008      	beq.n	800140e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013fe:	1dba      	adds	r2, r7, #6
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff facf 	bl	80009ac <HAL_GPIO_EXTI_Callback>
  }
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f000 fbbf 	bl	8001bae <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4bc9      	ldr	r3, [pc, #804]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	220c      	movs	r2, #12
 8001436:	4013      	ands	r3, r2
 8001438:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143a:	4bc7      	ldr	r3, [pc, #796]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	025b      	lsls	r3, r3, #9
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x36>
 8001450:	e07e      	b.n	8001550 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	2b08      	cmp	r3, #8
 8001456:	d007      	beq.n	8001468 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x68>
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	025b      	lsls	r3, r3, #9
 8001464:	429a      	cmp	r2, r3
 8001466:	d10d      	bne.n	8001484 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4bbb      	ldr	r3, [pc, #748]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	d100      	bne.n	8001476 <HAL_RCC_OscConfig+0x5a>
 8001474:	e06b      	b.n	800154e <HAL_RCC_OscConfig+0x132>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d167      	bne.n	800154e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f000 fb95 	bl	8001bae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_OscConfig+0x84>
 8001490:	4bb1      	ldr	r3, [pc, #708]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4bb0      	ldr	r3, [pc, #704]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0249      	lsls	r1, r1, #9
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e027      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	02db      	lsls	r3, r3, #11
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d10e      	bne.n	80014ca <HAL_RCC_OscConfig+0xae>
 80014ac:	4baa      	ldr	r3, [pc, #680]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4ba9      	ldr	r3, [pc, #676]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	02c9      	lsls	r1, r1, #11
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	4ba7      	ldr	r3, [pc, #668]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4ba6      	ldr	r3, [pc, #664]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0249      	lsls	r1, r1, #9
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e012      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014ca:	4ba3      	ldr	r3, [pc, #652]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4ba2      	ldr	r3, [pc, #648]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014d0:	49a2      	ldr	r1, [pc, #648]	; (800175c <HAL_RCC_OscConfig+0x340>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	025b      	lsls	r3, r3, #9
 80014de:	4013      	ands	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4b9c      	ldr	r3, [pc, #624]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b9b      	ldr	r3, [pc, #620]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014ea:	499d      	ldr	r1, [pc, #628]	; (8001760 <HAL_RCC_OscConfig+0x344>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d015      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc4e 	bl	8000d98 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001500:	e009      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001502:	f7ff fc49 	bl	8000d98 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d902      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	f000 fb4c 	bl	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001516:	4b90      	ldr	r3, [pc, #576]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d0ef      	beq.n	8001502 <HAL_RCC_OscConfig+0xe6>
 8001522:	e015      	b.n	8001550 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc38 	bl	8000d98 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fc33 	bl	8000d98 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e336      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001540:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x112>
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x140>
 800155a:	e099      	b.n	8001690 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	2220      	movs	r2, #32
 8001566:	4013      	ands	r3, r2
 8001568:	d009      	beq.n	800157e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800156a:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001570:	2120      	movs	r1, #32
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2220      	movs	r2, #32
 800157a:	4393      	bics	r3, r2
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d13e      	bne.n	8001608 <HAL_RCC_OscConfig+0x1ec>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d13b      	bne.n	8001608 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001590:	4b71      	ldr	r3, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2204      	movs	r2, #4
 8001596:	4013      	ands	r3, r2
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x188>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e304      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x348>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	021a      	lsls	r2, r3, #8
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2209      	movs	r2, #9
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015cc:	f000 fc42 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 80015d0:	0001      	movs	r1, r0
 80015d2:	4b61      	ldr	r3, [pc, #388]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_RCC_OscConfig+0x34c>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	000a      	movs	r2, r1
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x350>)
 80015e6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_OscConfig+0x354>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2513      	movs	r5, #19
 80015ee:	197c      	adds	r4, r7, r5
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fb8b 	bl	8000d0c <HAL_InitTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015fa:	197b      	adds	r3, r7, r5
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d046      	beq.n	8001690 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	e2d2      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d027      	beq.n	800165e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800160e:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2209      	movs	r2, #9
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fbba 	bl	8000d98 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fbb5 	bl	8000d98 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2b8      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d0f1      	beq.n	800162a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a46      	ldr	r2, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x348>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb95 	bl	8000d98 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fb90 	bl	8000d98 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e293      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2204      	movs	r2, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d1f1      	bne.n	8001674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2210      	movs	r2, #16
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x280>
 800169a:	e0a2      	b.n	80017e2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d140      	bne.n	8001724 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x29e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e279      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a2d      	ldr	r2, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x358>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	0a19      	lsrs	r1, r3, #8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	061a      	lsls	r2, r3, #24
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	0b5b      	lsrs	r3, r3, #13
 80016e8:	3301      	adds	r3, #1
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	0212      	lsls	r2, r2, #8
 80016ee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	210f      	movs	r1, #15
 80016f8:	400b      	ands	r3, r1
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x34c>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_RCC_OscConfig+0x350>)
 8001702:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCC_OscConfig+0x354>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2513      	movs	r5, #19
 800170a:	197c      	adds	r4, r7, r5
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff fafd 	bl	8000d0c <HAL_InitTick>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001716:	197b      	adds	r3, r7, r5
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d061      	beq.n	80017e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800171e:	197b      	adds	r3, r7, r5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	e244      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d040      	beq.n	80017ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb2d 	bl	8000d98 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001742:	e019      	b.n	8001778 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001744:	f7ff fb28 	bl	8000d98 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d912      	bls.n	8001778 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e22b      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	fffeffff 	.word	0xfffeffff
 8001760:	fffbffff 	.word	0xfffbffff
 8001764:	ffffe0ff 	.word	0xffffe0ff
 8001768:	08003f9c 	.word	0x08003f9c
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004
 8001774:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001778:	4bca      	ldr	r3, [pc, #808]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d0df      	beq.n	8001744 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001784:	4bc7      	ldr	r3, [pc, #796]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4ac7      	ldr	r2, [pc, #796]	; (8001aa8 <HAL_RCC_OscConfig+0x68c>)
 800178a:	4013      	ands	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001792:	4bc4      	ldr	r3, [pc, #784]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001798:	4bc2      	ldr	r3, [pc, #776]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	0a19      	lsrs	r1, r3, #8
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	061a      	lsls	r2, r3, #24
 80017a6:	4bbf      	ldr	r3, [pc, #764]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	e019      	b.n	80017e2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ae:	4bbd      	ldr	r3, [pc, #756]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4bbc      	ldr	r3, [pc, #752]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017b4:	49bd      	ldr	r1, [pc, #756]	; (8001aac <HAL_RCC_OscConfig+0x690>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff faed 	bl	8000d98 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c4:	f7ff fae8 	bl	8000d98 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1eb      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017d6:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2208      	movs	r2, #8
 80017e8:	4013      	ands	r3, r2
 80017ea:	d036      	beq.n	800185a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d019      	beq.n	8001828 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4bab      	ldr	r3, [pc, #684]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f8:	4baa      	ldr	r3, [pc, #680]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	430a      	orrs	r2, r1
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff faca 	bl	8000d98 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff fac5 	bl	8000d98 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1c8      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181c:	4ba1      	ldr	r3, [pc, #644]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800181e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d0f1      	beq.n	800180a <HAL_RCC_OscConfig+0x3ee>
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001828:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800182a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182c:	4b9d      	ldr	r3, [pc, #628]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fab0 	bl	8000d98 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff faab 	bl	8000d98 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1ae      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001850:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x44a>
 8001864:	e0ae      	b.n	80019c4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2023      	movs	r0, #35	; 0x23
 8001868:	183b      	adds	r3, r7, r0
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186e:	4b8d      	ldr	r3, [pc, #564]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	055b      	lsls	r3, r3, #21
 8001876:	4013      	ands	r3, r2
 8001878:	d109      	bne.n	800188e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800187c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187e:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0549      	lsls	r1, r1, #21
 8001884:	430a      	orrs	r2, r1
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001888:	183b      	adds	r3, r7, r0
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x694>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d11a      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <HAL_RCC_OscConfig+0x694>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <HAL_RCC_OscConfig+0x694>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0049      	lsls	r1, r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fa76 	bl	8000d98 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff fa71 	bl	8000d98 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e174      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x694>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x4d0>
 80018dc:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0049      	lsls	r1, r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ea:	e031      	b.n	8001950 <HAL_RCC_OscConfig+0x534>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x4f2>
 80018f4:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80018fa:	496c      	ldr	r1, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x690>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001904:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001906:	496b      	ldr	r1, [pc, #428]	; (8001ab4 <HAL_RCC_OscConfig+0x698>)
 8001908:	400a      	ands	r2, r1
 800190a:	651a      	str	r2, [r3, #80]	; 0x50
 800190c:	e020      	b.n	8001950 <HAL_RCC_OscConfig+0x534>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	429a      	cmp	r2, r3
 8001918:	d10e      	bne.n	8001938 <HAL_RCC_OscConfig+0x51c>
 800191a:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800191c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	00c9      	lsls	r1, r1, #3
 8001924:	430a      	orrs	r2, r1
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
 8001928:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800192a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192c:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0049      	lsls	r1, r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	651a      	str	r2, [r3, #80]	; 0x50
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x534>
 8001938:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800193a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800193e:	495b      	ldr	r1, [pc, #364]	; (8001aac <HAL_RCC_OscConfig+0x690>)
 8001940:	400a      	ands	r2, r1
 8001942:	651a      	str	r2, [r3, #80]	; 0x50
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 800194a:	495a      	ldr	r1, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x698>)
 800194c:	400a      	ands	r2, r1
 800194e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fa1e 	bl	8000d98 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001960:	e009      	b.n	8001976 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fa19 	bl	8000d98 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_OscConfig+0x69c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e11b      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d0ef      	beq.n	8001962 <HAL_RCC_OscConfig+0x546>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fa08 	bl	8000d98 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800198c:	e009      	b.n	80019a2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fa03 	bl	8000d98 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a47      	ldr	r2, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x69c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e105      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1ef      	bne.n	800198e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ae:	2323      	movs	r3, #35	; 0x23
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019be:	493f      	ldr	r1, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x6a0>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2220      	movs	r2, #32
 80019ca:	4013      	ands	r3, r2
 80019cc:	d049      	beq.n	8001a62 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d026      	beq.n	8001a24 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019d6:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x6a4>)
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_RCC_OscConfig+0x6a4>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0189      	lsls	r1, r1, #6
 80019f8:	430a      	orrs	r2, r1
 80019fa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff f9cc 	bl	8000d98 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a06:	f7ff f9c7 	bl	8000d98 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0ca      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f1      	beq.n	8001a06 <HAL_RCC_OscConfig+0x5ea>
 8001a22:	e01e      	b.n	8001a62 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_RCC_OscConfig+0x6a4>)
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x6a4>)
 8001a36:	4923      	ldr	r1, [pc, #140]	; (8001ac4 <HAL_RCC_OscConfig+0x6a8>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f9ac 	bl	8000d98 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff f9a7 	bl	8000d98 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0aa      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f1      	bne.n	8001a46 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d100      	bne.n	8001a6c <HAL_RCC_OscConfig+0x650>
 8001a6a:	e09f      	b.n	8001bac <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d100      	bne.n	8001a74 <HAL_RCC_OscConfig+0x658>
 8001a72:	e078      	b.n	8001b66 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d159      	bne.n	8001b30 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001a82:	4911      	ldr	r1, [pc, #68]	; (8001ac8 <HAL_RCC_OscConfig+0x6ac>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff f986 	bl	8000d98 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f981 	bl	8000d98 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d915      	bls.n	8001acc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e084      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	ffff1fff 	.word	0xffff1fff
 8001aac:	fffffeff 	.word	0xfffffeff
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	fffffbff 	.word	0xfffffbff
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	efffffff 	.word	0xefffffff
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	ffffdfff 	.word	0xffffdfff
 8001ac8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d1dc      	bne.n	8001a92 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x7a0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	431a      	orrs	r2, r3
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0449      	lsls	r1, r1, #17
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff f947 	bl	8000d98 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f942 	bl	8000d98 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e045      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x6f4>
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_OscConfig+0x7a4>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f92c 	bl	8000d98 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f927 	bl	8000d98 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e02a      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	049b      	lsls	r3, r3, #18
 8001b60:	4013      	ands	r3, r2
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x72a>
 8001b64:	e022      	b.n	8001bac <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e01d      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_OscConfig+0x79c>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d10f      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	23f0      	movs	r3, #240	; 0xf0
 8001b8c:	039b      	lsls	r3, r3, #14
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b00a      	add	sp, #40	; 0x28
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	ff02ffff 	.word	0xff02ffff
 8001bc0:	feffffff 	.word	0xfeffffff

08001bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e128      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d91e      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f8ce 	bl	8000d98 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	e009      	b.n	8001c16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c02:	f7ff f8c9 	bl	8000d98 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	4a8a      	ldr	r2, [pc, #552]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e109      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b87      	ldr	r3, [pc, #540]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2e:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	22f0      	movs	r2, #240	; 0xf0
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x8a>
 8001c4c:	e089      	b.n	8001d62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c56:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	029b      	lsls	r3, r3, #10
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d120      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0e1      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	4013      	ands	r3, r2
 8001c78:	d114      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0d5      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d109      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0ca      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c94:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0c2      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f86e 	bl	8000d98 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	e009      	b.n	8001cde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cca:	f7ff f865 	bl	8000d98 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0a5      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d1ef      	bne.n	8001cca <HAL_RCC_ClockConfig+0x106>
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d111      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff f84f 	bl	8000d98 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a4d      	ldr	r2, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e08f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x132>
 8001d16:	e024      	b.n	8001d62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d11b      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f839 	bl	8000d98 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e079      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d1ef      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x15e>
 8001d42:	e00e      	b.n	8001d62 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7ff f828 	bl	8000d98 <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e068      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d21e      	bcs.n	8001dae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4393      	bics	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d82:	f7ff f809 	bl	8000d98 <HAL_GetTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	e009      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff f804 	bl	8000d98 <HAL_GetTick>
 8001d90:	0002      	movs	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <HAL_RCC_ClockConfig+0x274>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e044      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <HAL_RCC_ClockConfig+0x27c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d00a      	beq.n	8001dec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_RCC_ClockConfig+0x280>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00da      	lsls	r2, r3, #3
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dec:	f000 f832 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001df0:	0001      	movs	r1, r0
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x278>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	220f      	movs	r2, #15
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_RCC_ClockConfig+0x284>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	000a      	movs	r2, r1
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_ClockConfig+0x288>)
 8001e06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_ClockConfig+0x28c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	250b      	movs	r5, #11
 8001e0e:	197c      	adds	r4, r7, r5
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7fe ff7b 	bl	8000d0c <HAL_InitTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e1a:	197b      	adds	r3, r7, r5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e22:	197b      	adds	r3, r7, r5
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	40022000 	.word	0x40022000
 8001e38:	00001388 	.word	0x00001388
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	fffff8ff 	.word	0xfffff8ff
 8001e44:	ffffc7ff 	.word	0xffffc7ff
 8001e48:	08003f9c 	.word	0x08003f9c
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e62:	230c      	movs	r3, #12
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d014      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x40>
 8001e6a:	d900      	bls.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1a>
 8001e6c:	e07b      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x112>
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x24>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d00b      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e76:	e076      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e78:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e86:	e07c      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e88:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8c:	e079      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8e:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e92:	e076      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	0c9a      	lsrs	r2, r3, #18
 8001e98:	230f      	movs	r3, #15
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x148>)
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	0d9a      	lsrs	r2, r3, #22
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	3301      	adds	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	025b      	lsls	r3, r3, #9
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	4a35      	ldr	r2, [pc, #212]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	69f9      	ldr	r1, [r7, #28]
 8001eca:	f7fe f9c9 	bl	8000260 <__aeabi_lmul>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f7fe f99d 	bl	8000220 <__aeabi_uldivmod>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	000b      	movs	r3, r1
 8001eea:	0013      	movs	r3, r2
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	e037      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d01a      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f04:	2300      	movs	r3, #0
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	68f9      	ldr	r1, [r7, #12]
 8001f0a:	f7fe f9a9 	bl	8000260 <__aeabi_lmul>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	000b      	movs	r3, r1
 8001f12:	0010      	movs	r0, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f7fe f97d 	bl	8000220 <__aeabi_uldivmod>
 8001f26:	0002      	movs	r2, r0
 8001f28:	000b      	movs	r3, r1
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2e:	e017      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	0018      	movs	r0, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	0019      	movs	r1, r3
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f7fe f990 	bl	8000260 <__aeabi_lmul>
 8001f40:	0002      	movs	r2, r0
 8001f42:	000b      	movs	r3, r1
 8001f44:	0010      	movs	r0, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	001c      	movs	r4, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	001d      	movs	r5, r3
 8001f50:	0022      	movs	r2, r4
 8001f52:	002b      	movs	r3, r5
 8001f54:	f7fe f964 	bl	8000220 <__aeabi_uldivmod>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	000b      	movs	r3, r1
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f64:	e00d      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0b5b      	lsrs	r3, r3, #13
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	3301      	adds	r3, #1
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0212      	lsls	r2, r2, #8
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f80:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b00e      	add	sp, #56	; 0x38
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	003d0900 	.word	0x003d0900
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	08003fb4 	.word	0x08003fb4

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	0001      	movs	r1, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	40d9      	lsrs	r1, r3
 8001fce:	000b      	movs	r3, r1
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08003fac 	.word	0x08003fac

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffdc 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe8:	0001      	movs	r1, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	40d9      	lsrs	r1, r3
 8001ffa:	000b      	movs	r3, r1
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40021000 	.word	0x40021000
 8002008:	08003fac 	.word	0x08003fac

0800200c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002014:	2017      	movs	r0, #23
 8002016:	183b      	adds	r3, r7, r0
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2220      	movs	r2, #32
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002026:	e0c2      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	4b98      	ldr	r3, [pc, #608]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800202a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	d109      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	4b95      	ldr	r3, [pc, #596]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002038:	4b94      	ldr	r3, [pc, #592]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	0549      	lsls	r1, r1, #21
 800203e:	430a      	orrs	r2, r1
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002042:	183b      	adds	r3, r7, r0
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d11a      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002054:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	0049      	lsls	r1, r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7fe fe99 	bl	8000d98 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7fe fe94 	bl	8000d98 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e102      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4013      	ands	r3, r2
 8002088:	d0f0      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800208a:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	039b      	lsls	r3, r3, #14
 8002092:	4013      	ands	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	039b      	lsls	r3, r3, #14
 800209e:	4013      	ands	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d013      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	029b      	lsls	r3, r3, #10
 80020ae:	401a      	ands	r2, r3
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10a      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020b8:	4b74      	ldr	r3, [pc, #464]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	401a      	ands	r2, r3
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	029b      	lsls	r3, r3, #10
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d101      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0da      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ce:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03b      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	029b      	lsls	r3, r3, #10
 80020e8:	4013      	ands	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d033      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	d02e      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020fa:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002104:	4b61      	ldr	r3, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0309      	lsls	r1, r1, #12
 800210e:	430a      	orrs	r2, r1
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002112:	4b5e      	ldr	r3, [pc, #376]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002118:	495f      	ldr	r1, [pc, #380]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800211a:	400a      	ands	r2, r1
 800211c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d014      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fe33 	bl	8000d98 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002136:	e009      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe fe2e 	bl	8000d98 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e09b      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800214e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d0ef      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	23c0      	movs	r3, #192	; 0xc0
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	401a      	ands	r2, r3
 8002162:	23c0      	movs	r3, #192	; 0xc0
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	429a      	cmp	r2, r3
 8002168:	d10c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800216a:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	039b      	lsls	r3, r3, #14
 800217c:	401a      	ands	r2, r3
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002186:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	23c0      	movs	r3, #192	; 0xc0
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	401a      	ands	r2, r3
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002194:	430a      	orrs	r2, r1
 8002196:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002198:	2317      	movs	r3, #23
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a8:	493e      	ldr	r1, [pc, #248]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	2203      	movs	r2, #3
 80021be:	4393      	bics	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	220c      	movs	r2, #12
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002204:	430a      	orrs	r2, r1
 8002206:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2208      	movs	r2, #8
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4a25      	ldr	r2, [pc, #148]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002222:	430a      	orrs	r2, r1
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002242:	430a      	orrs	r2, r1
 8002244:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	4013      	ands	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002260:	430a      	orrs	r2, r1
 8002262:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	4013      	ands	r3, r2
 800226c:	d009      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800227e:	430a      	orrs	r2, r1
 8002280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b006      	add	sp, #24
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	fffcffff 	.word	0xfffcffff
 8002298:	fff7ffff 	.word	0xfff7ffff
 800229c:	00001388 	.word	0x00001388
 80022a0:	ffcfffff 	.word	0xffcfffff
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	fffff3ff 	.word	0xfffff3ff
 80022ac:	ffffcfff 	.word	0xffffcfff
 80022b0:	fbffffff 	.word	0xfbffffff
 80022b4:	fff3ffff 	.word	0xfff3ffff

080022b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e08e      	b.n	80023e8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2221      	movs	r2, #33	; 0x21
 80022ce:	5c9b      	ldrb	r3, [r3, r2]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe fb8d 	bl	8000a00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	2102      	movs	r1, #2
 80022ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22ca      	movs	r2, #202	; 0xca
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2253      	movs	r2, #83	; 0x53
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fbb2 	bl	8002a6a <RTC_EnterInitMode>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d009      	beq.n	800231e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2221      	movs	r2, #33	; 0x21
 8002316:	2104      	movs	r1, #4
 8002318:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e064      	b.n	80023e8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4931      	ldr	r1, [pc, #196]	; (80023f0 <HAL_RTC_Init+0x138>)
 800232a:	400a      	ands	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	438a      	bics	r2, r1
 8002378:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2103      	movs	r1, #3
 8002386:	438a      	bics	r2, r1
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2220      	movs	r2, #32
 80023aa:	4013      	ands	r3, r2
 80023ac:	d113      	bne.n	80023d6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 fb33 	bl	8002a1c <HAL_RTC_WaitForSynchro>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d00d      	beq.n	80023d6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2221      	movs	r2, #33	; 0x21
 80023c6:	2104      	movs	r1, #4
 80023c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e008      	b.n	80023e8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	22ff      	movs	r2, #255	; 0xff
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
  }
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ff8fffbf 	.word	0xff8fffbf

080023f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_RTC_SetTime+0x1a>
 800240a:	2302      	movs	r3, #2
 800240c:	e0ad      	b.n	800256a <HAL_RTC_SetTime+0x176>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	2101      	movs	r1, #1
 8002414:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2221      	movs	r2, #33	; 0x21
 800241a:	2102      	movs	r1, #2
 800241c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d125      	bne.n	8002470 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	4013      	ands	r3, r2
 800242e:	d102      	bne.n	8002436 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fb3f 	bl	8002abe <RTC_ByteToBcd2>
 8002440:	0003      	movs	r3, r0
 8002442:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 fb38 	bl	8002abe <RTC_ByteToBcd2>
 800244e:	0003      	movs	r3, r0
 8002450:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002452:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	789b      	ldrb	r3, [r3, #2]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fb30 	bl	8002abe <RTC_ByteToBcd2>
 800245e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002460:	0022      	movs	r2, r4
 8002462:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	78db      	ldrb	r3, [r3, #3]
 8002468:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e017      	b.n	80024a0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	4013      	ands	r3, r2
 800247a:	d102      	bne.n	8002482 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800248e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002494:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22ca      	movs	r2, #202	; 0xca
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2253      	movs	r2, #83	; 0x53
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fad9 	bl	8002a6a <RTC_EnterInitMode>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	22ff      	movs	r2, #255	; 0xff
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2221      	movs	r2, #33	; 0x21
 80024c8:	2104      	movs	r1, #4
 80024ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e048      	b.n	800256a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4925      	ldr	r1, [pc, #148]	; (8002574 <HAL_RTC_SetTime+0x180>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4922      	ldr	r1, [pc, #136]	; (8002578 <HAL_RTC_SetTime+0x184>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	431a      	orrs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	438a      	bics	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2220      	movs	r2, #32
 8002524:	4013      	ands	r3, r2
 8002526:	d113      	bne.n	8002550 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fa76 	bl	8002a1c <HAL_RTC_WaitForSynchro>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d00d      	beq.n	8002550 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2221      	movs	r2, #33	; 0x21
 8002540:	2104      	movs	r1, #4
 8002542:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00c      	b.n	800256a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	22ff      	movs	r2, #255	; 0xff
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2221      	movs	r2, #33	; 0x21
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
  }
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b007      	add	sp, #28
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	007f7f7f 	.word	0x007f7f7f
 8002578:	fffbffff 	.word	0xfffbffff

0800257c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_RTC_SetDate+0x1a>
 8002592:	2302      	movs	r3, #2
 8002594:	e099      	b.n	80026ca <HAL_RTC_SetDate+0x14e>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2221      	movs	r2, #33	; 0x21
 80025a2:	2102      	movs	r1, #2
 80025a4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10e      	bne.n	80025ca <HAL_RTC_SetDate+0x4e>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	001a      	movs	r2, r3
 80025b2:	2310      	movs	r3, #16
 80025b4:	4013      	ands	r3, r2
 80025b6:	d008      	beq.n	80025ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	785b      	ldrb	r3, [r3, #1]
 80025bc:	2210      	movs	r2, #16
 80025be:	4393      	bics	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	330a      	adds	r3, #10
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11c      	bne.n	800260a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fa72 	bl	8002abe <RTC_ByteToBcd2>
 80025da:	0003      	movs	r3, r0
 80025dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fa6b 	bl	8002abe <RTC_ByteToBcd2>
 80025e8:	0003      	movs	r3, r0
 80025ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 fa63 	bl	8002abe <RTC_ByteToBcd2>
 80025f8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80025fa:	0022      	movs	r2, r4
 80025fc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e00e      	b.n	8002628 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	78db      	ldrb	r3, [r3, #3]
 800260e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002616:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800261c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	22ca      	movs	r2, #202	; 0xca
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2253      	movs	r2, #83	; 0x53
 8002636:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fa15 	bl	8002a6a <RTC_EnterInitMode>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d00d      	beq.n	8002660 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2221      	movs	r2, #33	; 0x21
 8002650:	2104      	movs	r1, #4
 8002652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e034      	b.n	80026ca <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	491b      	ldr	r1, [pc, #108]	; (80026d4 <HAL_RTC_SetDate+0x158>)
 8002668:	400a      	ands	r2, r1
 800266a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	438a      	bics	r2, r1
 800267a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2220      	movs	r2, #32
 8002684:	4013      	ands	r3, r2
 8002686:	d113      	bne.n	80026b0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f9c6 	bl	8002a1c <HAL_RTC_WaitForSynchro>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d00d      	beq.n	80026b0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2221      	movs	r2, #33	; 0x21
 80026a0:	2104      	movs	r1, #4
 80026a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e00c      	b.n	80026ca <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2221      	movs	r2, #33	; 0x21
 80026bc:	2101      	movs	r1, #1
 80026be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
  }
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b007      	add	sp, #28
 80026d0:	bd90      	pop	{r4, r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	00ffff3f 	.word	0x00ffff3f

080026d8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	5c9b      	ldrb	r3, [r3, r2]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_RTC_SetAlarm_IT+0x1a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e130      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x27c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2221      	movs	r2, #33	; 0x21
 80026fe:	2102      	movs	r1, #2
 8002700:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d136      	bne.n	8002776 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	4013      	ands	r3, r2
 8002712:	d102      	bne.n	800271a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f9cd 	bl	8002abe <RTC_ByteToBcd2>
 8002724:	0003      	movs	r3, r0
 8002726:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f9c6 	bl	8002abe <RTC_ByteToBcd2>
 8002732:	0003      	movs	r3, r0
 8002734:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002736:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f9be 	bl	8002abe <RTC_ByteToBcd2>
 8002742:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002744:	0022      	movs	r2, r4
 8002746:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800274e:	431a      	orrs	r2, r3
 8002750:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2220      	movs	r2, #32
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f9b0 	bl	8002abe <RTC_ByteToBcd2>
 800275e:	0003      	movs	r3, r0
 8002760:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002762:	0022      	movs	r2, r4
 8002764:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800276a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002770:	4313      	orrs	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	e022      	b.n	80027bc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	4013      	ands	r3, r2
 8002780:	d102      	bne.n	8002788 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002794:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800279a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	78db      	ldrb	r3, [r3, #3]
 80027a0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2120      	movs	r1, #32
 80027a8:	5c5b      	ldrb	r3, [r3, r1]
 80027aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	22ca      	movs	r2, #202	; 0xca
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2253      	movs	r2, #83	; 0x53
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d14e      	bne.n	8002882 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	495b      	ldr	r1, [pc, #364]	; (800295c <HAL_RTC_SetAlarm_IT+0x284>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	22ff      	movs	r2, #255	; 0xff
 80027fc:	401a      	ands	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4957      	ldr	r1, [pc, #348]	; (8002960 <HAL_RTC_SetAlarm_IT+0x288>)
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002808:	f7fe fac6 	bl	8000d98 <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002810:	e016      	b.n	8002840 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002812:	f7fe fac1 	bl	8000d98 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	23fa      	movs	r3, #250	; 0xfa
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d90d      	bls.n	8002840 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2221      	movs	r2, #33	; 0x21
 8002830:	2103      	movs	r1, #3
 8002832:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e089      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	d0e2      	beq.n	8002812 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0049      	lsls	r1, r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0149      	lsls	r1, r1, #5
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e04d      	b.n	800291e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4935      	ldr	r1, [pc, #212]	; (8002964 <HAL_RTC_SetAlarm_IT+0x28c>)
 800288e:	400a      	ands	r2, r1
 8002890:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	22ff      	movs	r2, #255	; 0xff
 800289a:	401a      	ands	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4931      	ldr	r1, [pc, #196]	; (8002968 <HAL_RTC_SetAlarm_IT+0x290>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028a6:	f7fe fa77 	bl	8000d98 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028ae:	e016      	b.n	80028de <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028b0:	f7fe fa72 	bl	8000d98 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	1ad2      	subs	r2, r2, r3
 80028ba:	23fa      	movs	r3, #250	; 0xfa
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90d      	bls.n	80028de <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2221      	movs	r2, #33	; 0x21
 80028ce:	2103      	movs	r1, #3
 80028d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e03a      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d0e2      	beq.n	80028b0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	0089      	lsls	r1, r1, #2
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0189      	lsls	r1, r1, #6
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RTC_SetAlarm_IT+0x294>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RTC_SetAlarm_IT+0x294>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0289      	lsls	r1, r1, #10
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RTC_SetAlarm_IT+0x294>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_RTC_SetAlarm_IT+0x294>)
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	0289      	lsls	r1, r1, #10
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	22ff      	movs	r2, #255	; 0xff
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	2100      	movs	r1, #0
 8002950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b009      	add	sp, #36	; 0x24
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	fffffeff 	.word	0xfffffeff
 8002960:	fffffe7f 	.word	0xfffffe7f
 8002964:	fffffdff 	.word	0xfffffdff
 8002968:	fffffd7f 	.word	0xfffffd7f
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	4013      	ands	r3, r2
 8002984:	d014      	beq.n	80029b0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4013      	ands	r3, r2
 8002992:	d00d      	beq.n	80029b0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f838 	bl	8002a0c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	22ff      	movs	r2, #255	; 0xff
 80029a4:	401a      	ands	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4915      	ldr	r1, [pc, #84]	; (8002a00 <HAL_RTC_AlarmIRQHandler+0x90>)
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	4013      	ands	r3, r2
 80029bc:	d014      	beq.n	80029e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00d      	beq.n	80029e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f89d 	bl	8002b0e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	22ff      	movs	r2, #255	; 0xff
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <HAL_RTC_AlarmIRQHandler+0x94>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_RTC_AlarmIRQHandler+0x98>)
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0292      	lsls	r2, r2, #10
 80029ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2221      	movs	r2, #33	; 0x21
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fffffe7f 	.word	0xfffffe7f
 8002a04:	fffffd7f 	.word	0xfffffd7f
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	21a0      	movs	r1, #160	; 0xa0
 8002a30:	438a      	bics	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002a34:	f7fe f9b0 	bl	8000d98 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a3e:	f7fe f9ab 	bl	8000d98 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	23fa      	movs	r3, #250	; 0xfa
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d901      	bls.n	8002a54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e006      	b.n	8002a62 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d11a      	bne.n	8002ab4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4252      	negs	r2, r2
 8002a86:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a88:	f7fe f986 	bl	8000d98 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002a90:	e00a      	b.n	8002aa8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a92:	f7fe f981 	bl	8000d98 <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	23fa      	movs	r3, #250	; 0xfa
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d901      	bls.n	8002aa8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e006      	b.n	8002ab6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d0ee      	beq.n	8002a92 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}

08002abe <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	1dfb      	adds	r3, r7, #7
 8002ac8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002ace:	230b      	movs	r3, #11
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	1dfa      	adds	r2, r7, #7
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002ad8:	e008      	b.n	8002aec <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002ae0:	220b      	movs	r2, #11
 8002ae2:	18bb      	adds	r3, r7, r2
 8002ae4:	18ba      	adds	r2, r7, r2
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	3a0a      	subs	r2, #10
 8002aea:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002aec:	210b      	movs	r1, #11
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d8f1      	bhi.n	8002ada <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b2db      	uxtb	r3, r3
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e083      	b.n	8002c3a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	2382      	movs	r3, #130	; 0x82
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d009      	beq.n	8002b5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
 8002b4c:	e005      	b.n	8002b5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2251      	movs	r2, #81	; 0x51
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2250      	movs	r2, #80	; 0x50
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7fd ff62 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2251      	movs	r2, #81	; 0x51
 8002b80:	2102      	movs	r1, #2
 8002b82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2382      	movs	r3, #130	; 0x82
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	2384      	movs	r3, #132	; 0x84
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2102      	movs	r1, #2
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6999      	ldr	r1, [r3, #24]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	400b      	ands	r3, r1
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2138      	movs	r1, #56	; 0x38
 8002bdc:	400b      	ands	r3, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	400b      	ands	r3, r1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	0011      	movs	r1, r2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	019b      	lsls	r3, r3, #6
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2210      	movs	r2, #16
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <HAL_SPI_Init+0x124>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2251      	movs	r2, #81	; 0x51
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b002      	add	sp, #8
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	fffff7ff 	.word	0xfffff7ff

08002c48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	001a      	movs	r2, r3
 8002c66:	2301      	movs	r3, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d10f      	bne.n	8002c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c72:	d00b      	beq.n	8002c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d005      	beq.n	8002c8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	0010      	movs	r0, r2
 8002c88:	4798      	blx	r3
    return;
 8002c8a:	e0d5      	b.n	8002e38 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	001a      	movs	r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x68>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	09db      	lsrs	r3, r3, #7
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d005      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	0010      	movs	r0, r2
 8002cac:	4798      	blx	r3
    return;
 8002cae:	e0c3      	b.n	8002e38 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d10c      	bne.n	8002cd6 <HAL_SPI_IRQHandler+0x8e>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d106      	bne.n	8002cd6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_SPI_IRQHandler+0x8e>
 8002cd4:	e0b0      	b.n	8002e38 <HAL_SPI_IRQHandler+0x1f0>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	001a      	movs	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d100      	bne.n	8002ce4 <HAL_SPI_IRQHandler+0x9c>
 8002ce2:	e0a9      	b.n	8002e38 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	001a      	movs	r2, r3
 8002cea:	2301      	movs	r3, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d023      	beq.n	8002d38 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2251      	movs	r2, #81	; 0x51
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d011      	beq.n	8002d20 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	2204      	movs	r2, #4
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	e00b      	b.n	8002d38 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
        return;
 8002d36:	e07f      	b.n	8002e38 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d014      	beq.n	8002d6e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	2201      	movs	r2, #1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	438a      	bics	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	001a      	movs	r2, r3
 8002d74:	2301      	movs	r3, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	d00c      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	2208      	movs	r2, #8
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d04c      	beq.n	8002e36 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	21e0      	movs	r1, #224	; 0xe0
 8002da8:	438a      	bics	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2251      	movs	r2, #81	; 0x51
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <HAL_SPI_IRQHandler+0x17c>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d032      	beq.n	8002e2a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2103      	movs	r1, #3
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_SPI_IRQHandler+0x1f8>)
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fe f8fd 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_SPI_IRQHandler+0x1f8>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7fe f8e8 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002e28:	e004      	b.n	8002e34 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 f809 	bl	8002e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e32:	e000      	b.n	8002e36 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002e34:	46c0      	nop			; (mov r8, r8)
    return;
 8002e36:	46c0      	nop			; (mov r8, r8)
  }
}
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b008      	add	sp, #32
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	08002e55 	.word	0x08002e55

08002e44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ffe7 	bl	8002e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e044      	b.n	8002f1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2274      	movs	r2, #116	; 0x74
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fd fe39 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2224      	movs	r2, #36	; 0x24
 8002eae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fb26 	bl	8003514 <UART_SetConfig>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e024      	b.n	8002f1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 fdb9 	bl	8003a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	490d      	ldr	r1, [pc, #52]	; (8002f24 <HAL_UART_Init+0xa4>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	212a      	movs	r1, #42	; 0x2a
 8002efe:	438a      	bics	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fe51 	bl	8003bbc <UART_CheckIdleState>
 8002f1a:	0003      	movs	r3, r0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	ffffb7ff 	.word	0xffffb7ff

08002f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b0ab      	sub	sp, #172	; 0xac
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	22a4      	movs	r2, #164	; 0xa4
 8002f38:	18b9      	adds	r1, r7, r2
 8002f3a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	20a0      	movs	r0, #160	; 0xa0
 8002f44:	1839      	adds	r1, r7, r0
 8002f46:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	219c      	movs	r1, #156	; 0x9c
 8002f50:	1879      	adds	r1, r7, r1
 8002f52:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f54:	0011      	movs	r1, r2
 8002f56:	18bb      	adds	r3, r7, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a99      	ldr	r2, [pc, #612]	; (80031c0 <HAL_UART_IRQHandler+0x298>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2298      	movs	r2, #152	; 0x98
 8002f60:	18bc      	adds	r4, r7, r2
 8002f62:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f64:	18bb      	adds	r3, r7, r2
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d114      	bne.n	8002f96 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2220      	movs	r2, #32
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d00a      	beq.n	8002f96 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d100      	bne.n	8002f8a <HAL_UART_IRQHandler+0x62>
 8002f88:	e298      	b.n	80034bc <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	0010      	movs	r0, r2
 8002f92:	4798      	blx	r3
      }
      return;
 8002f94:	e292      	b.n	80034bc <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f96:	2398      	movs	r3, #152	; 0x98
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d100      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x7a>
 8002fa0:	e114      	b.n	80031cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fa2:	239c      	movs	r3, #156	; 0x9c
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d106      	bne.n	8002fbc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fae:	23a0      	movs	r3, #160	; 0xa0
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a83      	ldr	r2, [pc, #524]	; (80031c4 <HAL_UART_IRQHandler+0x29c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <HAL_UART_IRQHandler+0x94>
 8002fba:	e107      	b.n	80031cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fbc:	23a4      	movs	r3, #164	; 0xa4
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_UART_IRQHandler+0xc6>
 8002fc8:	23a0      	movs	r3, #160	; 0xa0
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	589b      	ldr	r3, [r3, r2]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fee:	23a4      	movs	r3, #164	; 0xa4
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d011      	beq.n	800301e <HAL_UART_IRQHandler+0xf6>
 8002ffa:	239c      	movs	r3, #156	; 0x9c
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d00b      	beq.n	800301e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	589b      	ldr	r3, [r3, r2]
 8003014:	2204      	movs	r2, #4
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800301e:	23a4      	movs	r3, #164	; 0xa4
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2204      	movs	r2, #4
 8003026:	4013      	ands	r3, r2
 8003028:	d011      	beq.n	800304e <HAL_UART_IRQHandler+0x126>
 800302a:	239c      	movs	r3, #156	; 0x9c
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2204      	movs	r2, #4
 800303c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	589b      	ldr	r3, [r3, r2]
 8003044:	2202      	movs	r2, #2
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800304e:	23a4      	movs	r3, #164	; 0xa4
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2208      	movs	r2, #8
 8003056:	4013      	ands	r3, r2
 8003058:	d017      	beq.n	800308a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800305a:	23a0      	movs	r3, #160	; 0xa0
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2220      	movs	r2, #32
 8003062:	4013      	ands	r3, r2
 8003064:	d105      	bne.n	8003072 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003066:	239c      	movs	r3, #156	; 0x9c
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003070:	d00b      	beq.n	800308a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2208      	movs	r2, #8
 8003078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	589b      	ldr	r3, [r3, r2]
 8003080:	2208      	movs	r2, #8
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800308a:	23a4      	movs	r3, #164	; 0xa4
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4013      	ands	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_UART_IRQHandler+0x198>
 8003098:	23a0      	movs	r3, #160	; 0xa0
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	04db      	lsls	r3, r3, #19
 80030a2:	4013      	ands	r3, r2
 80030a4:	d00c      	beq.n	80030c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	589b      	ldr	r3, [r3, r2]
 80030b6:	2220      	movs	r2, #32
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	589b      	ldr	r3, [r3, r2]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d100      	bne.n	80030cc <HAL_UART_IRQHandler+0x1a4>
 80030ca:	e1f9      	b.n	80034c0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030cc:	23a4      	movs	r3, #164	; 0xa4
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2220      	movs	r2, #32
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030d8:	23a0      	movs	r3, #160	; 0xa0
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2220      	movs	r2, #32
 80030e0:	4013      	ands	r3, r2
 80030e2:	d008      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	0010      	movs	r0, r2
 80030f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	589b      	ldr	r3, [r3, r2]
 80030fc:	2194      	movs	r1, #148	; 0x94
 80030fe:	187a      	adds	r2, r7, r1
 8003100:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	4013      	ands	r3, r2
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d004      	beq.n	800311a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003110:	187b      	adds	r3, r7, r1
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2228      	movs	r2, #40	; 0x28
 8003116:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003118:	d047      	beq.n	80031aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 fe59 	bl	8003dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	4013      	ands	r3, r2
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d137      	bne.n	80031a0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003138:	2090      	movs	r0, #144	; 0x90
 800313a:	183a      	adds	r2, r7, r0
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	2301      	movs	r3, #1
 8003140:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2140      	movs	r1, #64	; 0x40
 8003156:	438a      	bics	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	183b      	adds	r3, r7, r0
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003162:	f383 8810 	msr	PRIMASK, r3
}
 8003166:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_UART_IRQHandler+0x2a0>)
 8003176:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd ff33 	bl	8000fe8 <HAL_DMA_Abort_IT>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d01a      	beq.n	80031bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	0018      	movs	r0, r3
 8003192:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	e012      	b.n	80031bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f9a7 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319e:	e00d      	b.n	80031bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f9a2 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e008      	b.n	80031bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f99d 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	2100      	movs	r1, #0
 80031b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80031ba:	e181      	b.n	80034c0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	46c0      	nop			; (mov r8, r8)
    return;
 80031be:	e17f      	b.n	80034c0 <HAL_UART_IRQHandler+0x598>
 80031c0:	0000080f 	.word	0x0000080f
 80031c4:	04000120 	.word	0x04000120
 80031c8:	08003e99 	.word	0x08003e99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d000      	beq.n	80031d6 <HAL_UART_IRQHandler+0x2ae>
 80031d4:	e133      	b.n	800343e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031d6:	23a4      	movs	r3, #164	; 0xa4
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d100      	bne.n	80031e4 <HAL_UART_IRQHandler+0x2bc>
 80031e2:	e12c      	b.n	800343e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031e4:	23a0      	movs	r3, #160	; 0xa0
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2210      	movs	r2, #16
 80031ec:	4013      	ands	r3, r2
 80031ee:	d100      	bne.n	80031f2 <HAL_UART_IRQHandler+0x2ca>
 80031f0:	e125      	b.n	800343e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2210      	movs	r2, #16
 80031f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d000      	beq.n	800320a <HAL_UART_IRQHandler+0x2e2>
 8003208:	e09d      	b.n	8003346 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	217e      	movs	r1, #126	; 0x7e
 8003214:	187b      	adds	r3, r7, r1
 8003216:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003218:	187b      	adds	r3, r7, r1
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d100      	bne.n	8003222 <HAL_UART_IRQHandler+0x2fa>
 8003220:	e150      	b.n	80034c4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2258      	movs	r2, #88	; 0x58
 8003226:	5a9b      	ldrh	r3, [r3, r2]
 8003228:	187a      	adds	r2, r7, r1
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d300      	bcc.n	8003232 <HAL_UART_IRQHandler+0x30a>
 8003230:	e148      	b.n	80034c4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	187a      	adds	r2, r7, r1
 8003236:	215a      	movs	r1, #90	; 0x5a
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2220      	movs	r2, #32
 8003246:	4013      	ands	r3, r2
 8003248:	d16e      	bne.n	8003328 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003252:	67bb      	str	r3, [r7, #120]	; 0x78
 8003254:	2301      	movs	r3, #1
 8003256:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	499a      	ldr	r1, [pc, #616]	; (80034d4 <HAL_UART_IRQHandler+0x5ac>)
 800326c:	400a      	ands	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327c:	f3ef 8310 	mrs	r3, PRIMASK
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003284:	677b      	str	r3, [r7, #116]	; 0x74
 8003286:	2301      	movs	r3, #1
 8003288:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	438a      	bics	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	673b      	str	r3, [r7, #112]	; 0x70
 80032b8:	2301      	movs	r3, #1
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	438a      	bics	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80032f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032f6:	2301      	movs	r3, #1
 80032f8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2110      	movs	r1, #16
 800330e:	438a      	bics	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	0018      	movs	r0, r3
 8003324:	f7fd fe20 	bl	8000f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2258      	movs	r2, #88	; 0x58
 800332c:	5a9a      	ldrh	r2, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	215a      	movs	r1, #90	; 0x5a
 8003332:	5a5b      	ldrh	r3, [r3, r1]
 8003334:	b29b      	uxth	r3, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f8dc 	bl	80034fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003344:	e0be      	b.n	80034c4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2258      	movs	r2, #88	; 0x58
 800334a:	5a99      	ldrh	r1, [r3, r2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	225a      	movs	r2, #90	; 0x5a
 8003350:	5a9b      	ldrh	r3, [r3, r2]
 8003352:	b29a      	uxth	r2, r3
 8003354:	208e      	movs	r0, #142	; 0x8e
 8003356:	183b      	adds	r3, r7, r0
 8003358:	1a8a      	subs	r2, r1, r2
 800335a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	225a      	movs	r2, #90	; 0x5a
 8003360:	5a9b      	ldrh	r3, [r3, r2]
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d100      	bne.n	800336a <HAL_UART_IRQHandler+0x442>
 8003368:	e0ae      	b.n	80034c8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800336a:	183b      	adds	r3, r7, r0
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d100      	bne.n	8003374 <HAL_UART_IRQHandler+0x44c>
 8003372:	e0a9      	b.n	80034c8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	60fb      	str	r3, [r7, #12]
  return(result);
 800337a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	2488      	movs	r4, #136	; 0x88
 800337e:	193a      	adds	r2, r7, r4
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	2301      	movs	r3, #1
 8003384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	494f      	ldr	r1, [pc, #316]	; (80034d8 <HAL_UART_IRQHandler+0x5b0>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ac:	f3ef 8310 	mrs	r3, PRIMASK
 80033b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	2484      	movs	r4, #132	; 0x84
 80033b6:	193a      	adds	r2, r7, r4
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f383 8810 	msr	PRIMASK, r3
}
 80033e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fe:	2480      	movs	r4, #128	; 0x80
 8003400:	193a      	adds	r2, r7, r4
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	2301      	movs	r3, #1
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2110      	movs	r1, #16
 800341c:	438a      	bics	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	193b      	adds	r3, r7, r4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800342e:	183b      	adds	r3, r7, r0
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0011      	movs	r1, r2
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f860 	bl	80034fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800343c:	e044      	b.n	80034c8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800343e:	23a4      	movs	r3, #164	; 0xa4
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	035b      	lsls	r3, r3, #13
 8003448:	4013      	ands	r3, r2
 800344a:	d010      	beq.n	800346e <HAL_UART_IRQHandler+0x546>
 800344c:	239c      	movs	r3, #156	; 0x9c
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	03db      	lsls	r3, r3, #15
 8003456:	4013      	ands	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	0352      	lsls	r2, r2, #13
 8003462:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 fd58 	bl	8003f1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800346c:	e02f      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800346e:	23a4      	movs	r3, #164	; 0xa4
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	4013      	ands	r3, r2
 8003478:	d00f      	beq.n	800349a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800347a:	23a0      	movs	r3, #160	; 0xa0
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	4013      	ands	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01e      	beq.n	80034cc <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	0010      	movs	r0, r2
 8003496:	4798      	blx	r3
    }
    return;
 8003498:	e018      	b.n	80034cc <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800349a:	23a4      	movs	r3, #164	; 0xa4
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_UART_IRQHandler+0x5a6>
 80034a6:	23a0      	movs	r3, #160	; 0xa0
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 fd06 	bl	8003ec6 <UART_EndTransmit_IT>
    return;
 80034ba:	e008      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
      return;
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	e006      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
    return;
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	e004      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
      return;
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	e002      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
      return;
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	e000      	b.n	80034ce <HAL_UART_IRQHandler+0x5a6>
    return;
 80034cc:	46c0      	nop			; (mov r8, r8)
  }

}
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b02b      	add	sp, #172	; 0xac
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	fffffeff 	.word	0xfffffeff
 80034d8:	fffffedf 	.word	0xfffffedf

080034dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	000a      	movs	r2, r1
 8003506:	1cbb      	adds	r3, r7, #2
 8003508:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	b002      	add	sp, #8
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b08e      	sub	sp, #56	; 0x38
 8003518:	af00      	add	r7, sp, #0
 800351a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800351c:	231a      	movs	r3, #26
 800351e:	2218      	movs	r2, #24
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	431a      	orrs	r2, r3
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	431a      	orrs	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4313      	orrs	r3, r2
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4ac3      	ldr	r2, [pc, #780]	; (8003854 <UART_SetConfig+0x340>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4abe      	ldr	r2, [pc, #760]	; (8003858 <UART_SetConfig+0x344>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4ab8      	ldr	r2, [pc, #736]	; (800385c <UART_SetConfig+0x348>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003584:	4313      	orrs	r3, r2
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4ab4      	ldr	r2, [pc, #720]	; (8003860 <UART_SetConfig+0x34c>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4ab0      	ldr	r2, [pc, #704]	; (8003864 <UART_SetConfig+0x350>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d131      	bne.n	800360c <UART_SetConfig+0xf8>
 80035a8:	4baf      	ldr	r3, [pc, #700]	; (8003868 <UART_SetConfig+0x354>)
 80035aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ac:	2203      	movs	r2, #3
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d01d      	beq.n	80035f0 <UART_SetConfig+0xdc>
 80035b4:	d823      	bhi.n	80035fe <UART_SetConfig+0xea>
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d00c      	beq.n	80035d4 <UART_SetConfig+0xc0>
 80035ba:	d820      	bhi.n	80035fe <UART_SetConfig+0xea>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <UART_SetConfig+0xb2>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d00e      	beq.n	80035e2 <UART_SetConfig+0xce>
 80035c4:	e01b      	b.n	80035fe <UART_SetConfig+0xea>
 80035c6:	231b      	movs	r3, #27
 80035c8:	2218      	movs	r2, #24
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	19db      	adds	r3, r3, r7
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e0b4      	b.n	800373e <UART_SetConfig+0x22a>
 80035d4:	231b      	movs	r3, #27
 80035d6:	2218      	movs	r2, #24
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	2202      	movs	r2, #2
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e0ad      	b.n	800373e <UART_SetConfig+0x22a>
 80035e2:	231b      	movs	r3, #27
 80035e4:	2218      	movs	r2, #24
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e0a6      	b.n	800373e <UART_SetConfig+0x22a>
 80035f0:	231b      	movs	r3, #27
 80035f2:	2218      	movs	r2, #24
 80035f4:	189b      	adds	r3, r3, r2
 80035f6:	19db      	adds	r3, r3, r7
 80035f8:	2208      	movs	r2, #8
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e09f      	b.n	800373e <UART_SetConfig+0x22a>
 80035fe:	231b      	movs	r3, #27
 8003600:	2218      	movs	r2, #24
 8003602:	189b      	adds	r3, r3, r2
 8003604:	19db      	adds	r3, r3, r7
 8003606:	2210      	movs	r2, #16
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e098      	b.n	800373e <UART_SetConfig+0x22a>
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a96      	ldr	r2, [pc, #600]	; (800386c <UART_SetConfig+0x358>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d131      	bne.n	800367a <UART_SetConfig+0x166>
 8003616:	4b94      	ldr	r3, [pc, #592]	; (8003868 <UART_SetConfig+0x354>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	220c      	movs	r2, #12
 800361c:	4013      	ands	r3, r2
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d01d      	beq.n	800365e <UART_SetConfig+0x14a>
 8003622:	d823      	bhi.n	800366c <UART_SetConfig+0x158>
 8003624:	2b08      	cmp	r3, #8
 8003626:	d00c      	beq.n	8003642 <UART_SetConfig+0x12e>
 8003628:	d820      	bhi.n	800366c <UART_SetConfig+0x158>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <UART_SetConfig+0x120>
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00e      	beq.n	8003650 <UART_SetConfig+0x13c>
 8003632:	e01b      	b.n	800366c <UART_SetConfig+0x158>
 8003634:	231b      	movs	r3, #27
 8003636:	2218      	movs	r2, #24
 8003638:	189b      	adds	r3, r3, r2
 800363a:	19db      	adds	r3, r3, r7
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e07d      	b.n	800373e <UART_SetConfig+0x22a>
 8003642:	231b      	movs	r3, #27
 8003644:	2218      	movs	r2, #24
 8003646:	189b      	adds	r3, r3, r2
 8003648:	19db      	adds	r3, r3, r7
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e076      	b.n	800373e <UART_SetConfig+0x22a>
 8003650:	231b      	movs	r3, #27
 8003652:	2218      	movs	r2, #24
 8003654:	189b      	adds	r3, r3, r2
 8003656:	19db      	adds	r3, r3, r7
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e06f      	b.n	800373e <UART_SetConfig+0x22a>
 800365e:	231b      	movs	r3, #27
 8003660:	2218      	movs	r2, #24
 8003662:	189b      	adds	r3, r3, r2
 8003664:	19db      	adds	r3, r3, r7
 8003666:	2208      	movs	r2, #8
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e068      	b.n	800373e <UART_SetConfig+0x22a>
 800366c:	231b      	movs	r3, #27
 800366e:	2218      	movs	r2, #24
 8003670:	189b      	adds	r3, r3, r2
 8003672:	19db      	adds	r3, r3, r7
 8003674:	2210      	movs	r2, #16
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e061      	b.n	800373e <UART_SetConfig+0x22a>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7c      	ldr	r2, [pc, #496]	; (8003870 <UART_SetConfig+0x35c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d106      	bne.n	8003692 <UART_SetConfig+0x17e>
 8003684:	231b      	movs	r3, #27
 8003686:	2218      	movs	r2, #24
 8003688:	189b      	adds	r3, r3, r2
 800368a:	19db      	adds	r3, r3, r7
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e055      	b.n	800373e <UART_SetConfig+0x22a>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a77      	ldr	r2, [pc, #476]	; (8003874 <UART_SetConfig+0x360>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d106      	bne.n	80036aa <UART_SetConfig+0x196>
 800369c:	231b      	movs	r3, #27
 800369e:	2218      	movs	r2, #24
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	19db      	adds	r3, r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e049      	b.n	800373e <UART_SetConfig+0x22a>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6b      	ldr	r2, [pc, #428]	; (800385c <UART_SetConfig+0x348>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d13e      	bne.n	8003732 <UART_SetConfig+0x21e>
 80036b4:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <UART_SetConfig+0x354>)
 80036b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	22c0      	movs	r2, #192	; 0xc0
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d027      	beq.n	8003716 <UART_SetConfig+0x202>
 80036c6:	22c0      	movs	r2, #192	; 0xc0
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d82a      	bhi.n	8003724 <UART_SetConfig+0x210>
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d011      	beq.n	80036fa <UART_SetConfig+0x1e6>
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	4293      	cmp	r3, r2
 80036dc:	d822      	bhi.n	8003724 <UART_SetConfig+0x210>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <UART_SetConfig+0x1d8>
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	00d2      	lsls	r2, r2, #3
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <UART_SetConfig+0x1f4>
 80036ea:	e01b      	b.n	8003724 <UART_SetConfig+0x210>
 80036ec:	231b      	movs	r3, #27
 80036ee:	2218      	movs	r2, #24
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e021      	b.n	800373e <UART_SetConfig+0x22a>
 80036fa:	231b      	movs	r3, #27
 80036fc:	2218      	movs	r2, #24
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	19db      	adds	r3, r3, r7
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e01a      	b.n	800373e <UART_SetConfig+0x22a>
 8003708:	231b      	movs	r3, #27
 800370a:	2218      	movs	r2, #24
 800370c:	189b      	adds	r3, r3, r2
 800370e:	19db      	adds	r3, r3, r7
 8003710:	2204      	movs	r2, #4
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e013      	b.n	800373e <UART_SetConfig+0x22a>
 8003716:	231b      	movs	r3, #27
 8003718:	2218      	movs	r2, #24
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	2208      	movs	r2, #8
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e00c      	b.n	800373e <UART_SetConfig+0x22a>
 8003724:	231b      	movs	r3, #27
 8003726:	2218      	movs	r2, #24
 8003728:	189b      	adds	r3, r3, r2
 800372a:	19db      	adds	r3, r3, r7
 800372c:	2210      	movs	r2, #16
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e005      	b.n	800373e <UART_SetConfig+0x22a>
 8003732:	231b      	movs	r3, #27
 8003734:	2218      	movs	r2, #24
 8003736:	189b      	adds	r3, r3, r2
 8003738:	19db      	adds	r3, r3, r7
 800373a:	2210      	movs	r2, #16
 800373c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a46      	ldr	r2, [pc, #280]	; (800385c <UART_SetConfig+0x348>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d000      	beq.n	800374a <UART_SetConfig+0x236>
 8003748:	e09a      	b.n	8003880 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374a:	231b      	movs	r3, #27
 800374c:	2218      	movs	r2, #24
 800374e:	189b      	adds	r3, r3, r2
 8003750:	19db      	adds	r3, r3, r7
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d01d      	beq.n	8003794 <UART_SetConfig+0x280>
 8003758:	dc20      	bgt.n	800379c <UART_SetConfig+0x288>
 800375a:	2b04      	cmp	r3, #4
 800375c:	d015      	beq.n	800378a <UART_SetConfig+0x276>
 800375e:	dc1d      	bgt.n	800379c <UART_SetConfig+0x288>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <UART_SetConfig+0x256>
 8003764:	2b02      	cmp	r3, #2
 8003766:	d005      	beq.n	8003774 <UART_SetConfig+0x260>
 8003768:	e018      	b.n	800379c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376a:	f7fe fc23 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 800376e:	0003      	movs	r3, r0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003772:	e01c      	b.n	80037ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003774:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <UART_SetConfig+0x354>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2210      	movs	r2, #16
 800377a:	4013      	ands	r3, r2
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <UART_SetConfig+0x364>)
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003782:	e014      	b.n	80037ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003784:	4b3d      	ldr	r3, [pc, #244]	; (800387c <UART_SetConfig+0x368>)
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003788:	e011      	b.n	80037ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe fb63 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 800378e:	0003      	movs	r3, r0
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003792:	e00c      	b.n	80037ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800379a:	e008      	b.n	80037ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80037a0:	231a      	movs	r3, #26
 80037a2:	2218      	movs	r2, #24
 80037a4:	189b      	adds	r3, r3, r2
 80037a6:	19db      	adds	r3, r3, r7
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
        break;
 80037ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d100      	bne.n	80037b6 <UART_SetConfig+0x2a2>
 80037b4:	e134      	b.n	8003a20 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	0013      	movs	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d305      	bcc.n	80037d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d906      	bls.n	80037e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80037d2:	231a      	movs	r3, #26
 80037d4:	2218      	movs	r2, #24
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e11f      	b.n	8003a20 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	000b      	movs	r3, r1
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	0010      	movs	r0, r2
 80037f2:	0205      	lsls	r5, r0, #8
 80037f4:	431d      	orrs	r5, r3
 80037f6:	000b      	movs	r3, r1
 80037f8:	021c      	lsls	r4, r3, #8
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68b8      	ldr	r0, [r7, #8]
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	1900      	adds	r0, r0, r4
 800380c:	4169      	adcs	r1, r5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f7fc fd00 	bl	8000220 <__aeabi_uldivmod>
 8003820:	0002      	movs	r2, r0
 8003822:	000b      	movs	r3, r1
 8003824:	0013      	movs	r3, r2
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	429a      	cmp	r2, r3
 8003830:	d309      	bcc.n	8003846 <UART_SetConfig+0x332>
 8003832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	035b      	lsls	r3, r3, #13
 8003838:	429a      	cmp	r2, r3
 800383a:	d204      	bcs.n	8003846 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e0ec      	b.n	8003a20 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003846:	231a      	movs	r3, #26
 8003848:	2218      	movs	r2, #24
 800384a:	189b      	adds	r3, r3, r2
 800384c:	19db      	adds	r3, r3, r7
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e0e5      	b.n	8003a20 <UART_SetConfig+0x50c>
 8003854:	efff69f3 	.word	0xefff69f3
 8003858:	ffffcfff 	.word	0xffffcfff
 800385c:	40004800 	.word	0x40004800
 8003860:	fffff4ff 	.word	0xfffff4ff
 8003864:	40013800 	.word	0x40013800
 8003868:	40021000 	.word	0x40021000
 800386c:	40004400 	.word	0x40004400
 8003870:	40004c00 	.word	0x40004c00
 8003874:	40005000 	.word	0x40005000
 8003878:	003d0900 	.word	0x003d0900
 800387c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	429a      	cmp	r2, r3
 800388a:	d000      	beq.n	800388e <UART_SetConfig+0x37a>
 800388c:	e071      	b.n	8003972 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800388e:	231b      	movs	r3, #27
 8003890:	2218      	movs	r2, #24
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d822      	bhi.n	80038e2 <UART_SetConfig+0x3ce>
 800389c:	009a      	lsls	r2, r3, #2
 800389e:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <UART_SetConfig+0x52c>)
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a6:	f7fe fb85 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80038aa:	0003      	movs	r3, r0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ae:	e021      	b.n	80038f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7fe fb96 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 80038b4:	0003      	movs	r3, r0
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038b8:	e01c      	b.n	80038f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ba:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <UART_SetConfig+0x530>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	4013      	ands	r3, r2
 80038c2:	d002      	beq.n	80038ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038c4:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <UART_SetConfig+0x534>)
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038c8:	e014      	b.n	80038f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80038ca:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <UART_SetConfig+0x538>)
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ce:	e011      	b.n	80038f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d0:	f7fe fac0 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 80038d4:	0003      	movs	r3, r0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038d8:	e00c      	b.n	80038f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038e0:	e008      	b.n	80038f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80038e6:	231a      	movs	r3, #26
 80038e8:	2218      	movs	r2, #24
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	19db      	adds	r3, r3, r7
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
        break;
 80038f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d100      	bne.n	80038fc <UART_SetConfig+0x3e8>
 80038fa:	e091      	b.n	8003a20 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	005a      	lsls	r2, r3, #1
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	18d2      	adds	r2, r2, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f7fc fbfa 	bl	8000108 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	b29b      	uxth	r3, r3
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d921      	bls.n	8003964 <UART_SetConfig+0x450>
 8003920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	025b      	lsls	r3, r3, #9
 8003926:	429a      	cmp	r2, r3
 8003928:	d21c      	bcs.n	8003964 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	b29a      	uxth	r2, r3
 800392e:	200e      	movs	r0, #14
 8003930:	2418      	movs	r4, #24
 8003932:	1903      	adds	r3, r0, r4
 8003934:	19db      	adds	r3, r3, r7
 8003936:	210f      	movs	r1, #15
 8003938:	438a      	bics	r2, r1
 800393a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	2207      	movs	r2, #7
 8003944:	4013      	ands	r3, r2
 8003946:	b299      	uxth	r1, r3
 8003948:	1903      	adds	r3, r0, r4
 800394a:	19db      	adds	r3, r3, r7
 800394c:	1902      	adds	r2, r0, r4
 800394e:	19d2      	adds	r2, r2, r7
 8003950:	8812      	ldrh	r2, [r2, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1902      	adds	r2, r0, r4
 800395c:	19d2      	adds	r2, r2, r7
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e05d      	b.n	8003a20 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003964:	231a      	movs	r3, #26
 8003966:	2218      	movs	r2, #24
 8003968:	189b      	adds	r3, r3, r2
 800396a:	19db      	adds	r3, r3, r7
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e056      	b.n	8003a20 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003972:	231b      	movs	r3, #27
 8003974:	2218      	movs	r2, #24
 8003976:	189b      	adds	r3, r3, r2
 8003978:	19db      	adds	r3, r3, r7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d822      	bhi.n	80039c6 <UART_SetConfig+0x4b2>
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <UART_SetConfig+0x53c>)
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800398a:	f7fe fb13 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 800398e:	0003      	movs	r3, r0
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003992:	e021      	b.n	80039d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7fe fb24 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8003998:	0003      	movs	r3, r0
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800399c:	e01c      	b.n	80039d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <UART_SetConfig+0x530>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	4013      	ands	r3, r2
 80039a6:	d002      	beq.n	80039ae <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <UART_SetConfig+0x534>)
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039ac:	e014      	b.n	80039d8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80039ae:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <UART_SetConfig+0x538>)
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039b2:	e011      	b.n	80039d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b4:	f7fe fa4e 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 80039b8:	0003      	movs	r3, r0
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039bc:	e00c      	b.n	80039d8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039c4:	e008      	b.n	80039d8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80039ca:	231a      	movs	r3, #26
 80039cc:	2218      	movs	r2, #24
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
        break;
 80039d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	085a      	lsrs	r2, r3, #1
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	18d2      	adds	r2, r2, r3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	0019      	movs	r1, r3
 80039ee:	0010      	movs	r0, r2
 80039f0:	f7fc fb8a 	bl	8000108 <__udivsi3>
 80039f4:	0003      	movs	r3, r0
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d909      	bls.n	8003a14 <UART_SetConfig+0x500>
 8003a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	025b      	lsls	r3, r3, #9
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d204      	bcs.n	8003a14 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e005      	b.n	8003a20 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a14:	231a      	movs	r3, #26
 8003a16:	2218      	movs	r2, #24
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2200      	movs	r2, #0
 8003a24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a2c:	231a      	movs	r3, #26
 8003a2e:	2218      	movs	r2, #24
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	19db      	adds	r3, r3, r7
 8003a34:	781b      	ldrb	r3, [r3, #0]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b00e      	add	sp, #56	; 0x38
 8003a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	08003fc0 	.word	0x08003fc0
 8003a44:	40021000 	.word	0x40021000
 8003a48:	003d0900 	.word	0x003d0900
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	08003fe4 	.word	0x08003fe4

08003a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2201      	movs	r2, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <UART_AdvFeatureConfig+0x144>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2202      	movs	r2, #2
 8003a84:	4013      	ands	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a43      	ldr	r2, [pc, #268]	; (8003b9c <UART_AdvFeatureConfig+0x148>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a3b      	ldr	r2, [pc, #236]	; (8003ba0 <UART_AdvFeatureConfig+0x14c>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <UART_AdvFeatureConfig+0x150>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2210      	movs	r2, #16
 8003aea:	4013      	ands	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <UART_AdvFeatureConfig+0x154>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4a25      	ldr	r2, [pc, #148]	; (8003bac <UART_AdvFeatureConfig+0x158>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2240      	movs	r2, #64	; 0x40
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <UART_AdvFeatureConfig+0x15c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	035b      	lsls	r3, r3, #13
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d10b      	bne.n	8003b6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <UART_AdvFeatureConfig+0x160>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	4013      	ands	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <UART_AdvFeatureConfig+0x164>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	fffdffff 	.word	0xfffdffff
 8003b9c:	fffeffff 	.word	0xfffeffff
 8003ba0:	fffbffff 	.word	0xfffbffff
 8003ba4:	ffff7fff 	.word	0xffff7fff
 8003ba8:	ffffefff 	.word	0xffffefff
 8003bac:	ffffdfff 	.word	0xffffdfff
 8003bb0:	ffefffff 	.word	0xffefffff
 8003bb4:	ff9fffff 	.word	0xff9fffff
 8003bb8:	fff7ffff 	.word	0xfff7ffff

08003bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bcc:	f7fd f8e4 	bl	8000d98 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d10c      	bne.n	8003bfc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	0391      	lsls	r1, r2, #14
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <UART_CheckIdleState+0x8c>)
 8003bec:	9200      	str	r2, [sp, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f000 f82c 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d001      	beq.n	8003bfc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e021      	b.n	8003c40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d10c      	bne.n	8003c24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	03d1      	lsls	r1, r2, #15
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <UART_CheckIdleState+0x8c>)
 8003c14:	9200      	str	r2, [sp, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f000 f818 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d001      	beq.n	8003c24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e00d      	b.n	8003c40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2274      	movs	r2, #116	; 0x74
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	01ffffff 	.word	0x01ffffff

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b094      	sub	sp, #80	; 0x50
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e0a3      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c60:	3301      	adds	r3, #1
 8003c62:	d100      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c64:	e09f      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fd f897 	bl	8000d98 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d13d      	bne.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	494c      	ldr	r1, [pc, #304]	; (8003dd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb8:	2301      	movs	r3, #1
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2274      	movs	r2, #116	; 0x74
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e067      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2204      	movs	r2, #4
 8003d00:	4013      	ands	r3, r2
 8003d02:	d050      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	401a      	ands	r2, r3
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d146      	bne.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	613b      	str	r3, [r7, #16]
  return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4923      	ldr	r1, [pc, #140]	; (8003dd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5e:	2301      	movs	r3, #1
 8003d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	438a      	bics	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	2120      	movs	r1, #32
 8003d98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2274      	movs	r2, #116	; 0x74
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e010      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4013      	ands	r3, r2
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	425a      	negs	r2, r3
 8003db6:	4153      	adcs	r3, r2
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	001a      	movs	r2, r3
 8003dbc:	1dfb      	adds	r3, r7, #7
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d100      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003dc4:	e74b      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b014      	add	sp, #80	; 0x50
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	fffffe5f 	.word	0xfffffe5f

08003dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	; 0x38
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	617b      	str	r3, [r7, #20]
  return(result);
 8003de2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4925      	ldr	r1, [pc, #148]	; (8003e94 <UART_EndRxTransfer+0xc0>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e12:	623b      	str	r3, [r7, #32]
  return(result);
 8003e14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
 8003e18:	2301      	movs	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	438a      	bics	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	f383 8810 	msr	PRIMASK, r3
}
 8003e3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d118      	bne.n	8003e7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e52:	2301      	movs	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2110      	movs	r1, #16
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b00e      	add	sp, #56	; 0x38
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	fffffedf 	.word	0xfffffedf

08003e98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	225a      	movs	r2, #90	; 0x5a
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2252      	movs	r2, #82	; 0x52
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7ff fb17 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b004      	add	sp, #16
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2140      	movs	r1, #64	; 0x40
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f383 8810 	msr	PRIMASK, r3
}
 8003efe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fae4 	bl	80034dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	2600      	movs	r6, #0
 8003f30:	4d0c      	ldr	r5, [pc, #48]	; (8003f64 <__libc_init_array+0x38>)
 8003f32:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f34:	1b64      	subs	r4, r4, r5
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	f000 f821 	bl	8003f84 <_init>
 8003f42:	4d0a      	ldr	r5, [pc, #40]	; (8003f6c <__libc_init_array+0x40>)
 8003f44:	4c0a      	ldr	r4, [pc, #40]	; (8003f70 <__libc_init_array+0x44>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	00b3      	lsls	r3, r6, #2
 8003f52:	58eb      	ldr	r3, [r5, r3]
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	00b3      	lsls	r3, r6, #2
 8003f5c:	58eb      	ldr	r3, [r5, r3]
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	08004010 	.word	0x08004010
 8003f68:	08004010 	.word	0x08004010
 8003f6c:	08004010 	.word	0x08004010
 8003f70:	08004014 	.word	0x08004014

08003f74 <memset>:
 8003f74:	0003      	movs	r3, r0
 8003f76:	1882      	adds	r2, r0, r2
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <_init>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr

08003f90 <_fini>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr
